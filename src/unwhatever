#!/usr/bin/env python

# (c) 2012 Evan Driscoll
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
import os
import subprocess
import itertools

def get_file_count(output):
    lines = output.strip().split('\n')
    files = [line.split('/')[0] for line in lines]
    uniq = itertools.groupby(files)
    return sum(1 for _ in uniq)


commands = [
    ('.tar.bz2', 'tar tf %(filename)s',         'tar -C %(dir)s -xvjf %(filename)s'),
    ('.tar.gz',  'tar tf %(filename)s',         'tar -C %(dir)s -xvzf %(filename)s'),
    ('.tgz',     'tar tf %(filename)s',         'tar -C %(dir)s -xvzf %(filename)s'),
    ('.bz2',     'basename %(filename)s .bz2',  'bunzip2 -k %(filename)s'),
    ('.gz',      'basename %(filename)s .gz',   'gunzip -k %(filename)s'),
    ('.tar',     'tar tf %(filename)s',         'tar -C %(dir)s -xvf %(filename)s'),
    ('.lzma',    'basename %(filename)s .lzma', 'unlzma -k %(filename)s'),
    ('.zip',     'zipinfo -1 %(filename)s',     'unzip -d %(dir)s %(filename)s'),
]


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'Usage:'
        print ' ', sys.argv[0], '<filename>'
        print
        print '  <filename>  should have one of the following suffixes:'
        for (extension, _) in commands:
            print '                 ', extension

        sys.exit(1)

    filename = sys.argv[1]
    for (extension, listcmd, command) in commands:
        if filename.endswith(extension):
            listcmd = listcmd % {"filename":filename}
            listprocess = subprocess.Popen(listcmd, stdout=subprocess.PIPE, shell=True)
            output = listprocess.communicate()[0]
            multiple = get_file_count(output) > 1
            
            base = filename[0:-len(extension)]
            if multiple:
                target = base
                prefix = 'mkdir %(dir)s && '
            else:
                target = '.'
                prefix = ''
            command = (prefix + command) % {"filename":filename, "dir":target}


            print command
            ret = os.system(command)
            ret =0 
            sys.exit(ret)

    print filename + ': unknown extension'
    sys.exit(1)

    


# Local Variables:
#   mode: python
# End:
